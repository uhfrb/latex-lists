\ProvidesPackage{lists}

\RequirePackage{etoolbox}

% BEGIN DEBUGGING MACROS - MAKE INTO A SEPERATE FILE MAYBE EVENTUALLY
\RequirePackage{trace}                       % For debugging only

\newif\ifdebug
\debugtrue
\def\dblog#1{\ifdebug\wlog{[DEBUG]: #1}\fi}  % For debugging only
\def\dbloglist#1#2{\edef\logtmp{\getlist{#1}}\dblog{#2{\logtmp}}}
% END DEBUGGING MACROS   - MAKE INTO A SEPERATE FILE MAYBE EVENTUALLY

\newcommand*\ifcounter[1]{%       Taken unaltered from https://tex.stackexchange.com/questions/155776/check-if-counter-exists
  \ifcsname c@#1\endcsname%       Necessary to allow redefining a list with a name already given
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}

\newcounter{lists@count@rec}
\newcounter{lists@count@misc}

\def\emptystring{}
\def\csvsep{,}

\edef\emptylist{[]}

\def\lists@head\list@cons#1#2#3{#2}
\def\lists@tail\list@cons#1#2#3{#1}
\def\lists@sep\list@cons#1#2#3{#3}

\def\getsibling#1@front@@{\getconsstructure{#1@back}}
\def\lists@getname list@#1@cons@#2{#1}

\def\lists@iterate#1#2{%
  %
  %\dblog{----------------- Start of iteration -----------------}%
  %\dblog{\expandafter\noexpand#1}
  %
  \def\lists@curr@h{\expandafter\lists@head#1}%
  \def\lists@curr@t{\expandafter\lists@tail#1}%
  %
  %\dblog{Current tail: \lists@curr@t}%
  %\dblog{Current head: \lists@curr@h}%
  %
  \expandafter\edef\csname list@curr@item@rec\arabic{lists@count@rec}\endcsname{\lists@curr@h}%
  \def\tmp{\csname \lists@curr@t\endcsname}%
  \edef\tmpflag{\tmp}%
  %\dblog{Flag: \expandafter\noexpand\tmpflag}%
  %\dblog{}%
  %
  \ifx\emptylist\tmpflag%
  \else%
    \stepcounter{lists@count@rec}%
    \expandafter\expandafter\expandafter\lists@iterate\tmp#2%
    \addtocounter{lists@count@rec}{-1}%
    %\dblog{Return from recursion}%
  \fi%
  %
  %\dblog{Current command: \expandafter\noexpand\expandafter#2\expandafter{\csname list@curr@item@rec\arabic{lists@count@rec}\endcsname}}%
  \expandafter\expandafter\expandafter#2\expandafter\expandafter\expandafter{\csname list@curr@item@rec\arabic{lists@count@rec}\endcsname}%
}

\def\lists@foldl#1#2#3{%
  %
  %\dblog{----------------- Start of foldl iteration -----------------}%
  %
  \edef\tmp{#1}%
  %\dblog{Current list: \tmp}%
  %\dblog{Current accumulator: #3}%
  %
  \def\lists@curr@h{\expandafter\lists@head#1}%
  \def\lists@curr@t{\expandafter\lists@tail#1}%
  %\dblog{Current tail: \lists@curr@t}%
  %\dblog{Current head: \lists@curr@h}%
  %
  \def\tmp{\csname \lists@curr@t\endcsname}%
  \edef\tmpflag{\tmp}%
  %\dblog{Flag: \expandafter\noexpand\tmpflag}%
  %\dblog{}%
  %
  \edef\newAcc{#2{\lists@curr@h}{#3}}%
  \ifx\emptylist\tmpflag%
    \newAcc%
  \else%
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%
    \lists@foldl\expandafter\tmp\expandafter#2\expandafter\newAcc%
  \fi%
}

\def\lists@map#1#2{%
  %
  %\dblog{--------------- Start of map iteration ---------------}%
  %\dblog{Current list: #1}
  %
  \def\lists@curr@h{\expandafter\lists@head#1}%
  \edef\lists@curr@t{\expandafter\lists@tail#1}%
  \edef\lists@curr@s{\expandafter\lists@sep#1}%
  %
  %\dblog{Pattern matching successful}%
  \edef\tmpflag{\csname\lists@curr@t\endcsname}%
  %
  \edef\tmpItem{#2{\lists@curr@h}}%
  %\dblog{Old item: \lists@curr@h}%
  %\dblog{New item: \tmpItem}%
  %\dblog{Tail: \lists@curr@t}%
  %                                               
  \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%               Theoretically, the more elegant solution described in https://tex.stackexchange.com/questions/104506/expanding-arguments-before-macro-call
  \def\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%           might also work, but I have not been able to solve my issues through it.
  #1\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%
  {\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%
  \list@cons\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%
  {\expandafter\expandafter\expandafter\lists@curr@t\expandafter\expandafter\expandafter}%
  \expandafter\expandafter\expandafter{\expandafter\tmpItem\expandafter}%
  \expandafter{\lists@curr@s}}%   
  %
  \ifx\emptylist\tmpflag%
  \else%
    \expandafter\def\expandafter\tmp\expandafter{\csname\lists@curr@t\endcsname}%
    %\dblog{Redefinition successful, value now \expandafter\noexpand#1}%
    \expandafter\lists@map\tmp#2%
  \fi%
  %\dblog{Recursion successful, value now #1}%
}



\def\pop#1{%
  \IfNotEmpty{#1}{%
    \addtocounter{list@#1@count}{-1}%
  }%
}

\def\iterate#1#2{%
  \IfNotEmpty{#1}{%
    %\dblog{=================== Begin iterate ====================}%
    \setcounter{lists@count@rec}{0}%
    \edef\tempA{list@#1@cons@item\arabic{list@#1@count}}%
    \def\tempB{\csname \tempA\endcsname}%
    \expandafter\expandafter\expandafter\lists@iterate\tempB#2%
  }%
}

\def\map#1#2{%
  \IfNotEmpty{#1}{%
    %\dblog{===================== Begin map ======================}%
    \edef\tempA{list@#1@cons@item\arabic{list@#1@count}}
    \def\tempB{\csname \tempA\endcsname}%
    \expandafter\expandafter\expandafter\lists@map\tempB#2%
  }%
}

\def\foldl#1#2#3{%
  \IfNotEmpty{#1}{%
    %\dblog{==================== Begin foldl =====================}%
    \edef\tempA{list@#1@cons@item\arabic{list@#1@count}}
    \def\tempB{\csname \tempA\endcsname}%
    \expandafter\expandafter\expandafter\lists@foldl\tempB#2#3%
  }%
}

\def\head#1{%
  \IfNotEmpty{#1}{%
    \takeNth{#1}{0}%
  }%
}

\def\pop#1{%
  \IfNotEmpty{#1}{%
    \takeFomNth{#1}{1}{lists@pop@temp}%
    \edef\lists@pop@sep{\getsep{#1}}%
    \copyto{#1}{lists@pop@temp}{\lists@pop@sep}%
  }%
}

\def\copyto#1#2#3{%
  \declarelist{#1}{#3}%
  \def\lists@it##1{\appendtolist{#1}{##1}}%
  \iterate{#2}{\lists@it}%
}

\def\concat#1#2{%
  \def\lists@concat@it##1{\appendtolist{#1}{##1}}
  \iterate{#2}{\lists@concat@it}
}

\def\takeNth#1#2{%
  \setcounter{lists@count@misc}{#2 + 1}%
  \expandafter\def\expandafter\lists@n\expandafter{%
    \csname list@#1@cons@item\arabic{lists@count@misc}\endcsname%
  }%
  \expandafter\expandafter\expandafter\edef\expandafter\expandafter\expandafter\lists@h\expandafter\expandafter\expandafter{%
  \expandafter\expandafter\expandafter\lists@head\lists@n}%
  \lists@h%
  %\setcounter{lists@count@misc}{0}
  %
  %\def\lists@take##1{%
  %  \ifnum#2=\value{lists@count@misc}%
  %    \dblog{Taken element at pos #2: ##1}%
  %     ##1%
  %  \fi%
  %  \stepcounter{lists@count@misc}%
  %}
  %
  %\iterate{#1}{\lists@take}
}

\def\takeUpToNth#1#2#3{%
  %\dblog{==================== Begin firstN ====================}%
  \declarelist{#3}{\getsep{#1}}%
  \setcounter{lists@count@misc}{0}
  
  \def\lists@take##1{%
    \ifnum#2>\value{lists@count@misc}%
      %\dblog{Taken}%
      \appendtolist{#3}{##1}%
      \stepcounter{lists@count@misc}%
    \fi%
  }
  
  \iterate{#1}{\lists@take}
}

\def\takeFomNth#1#2#3{%
  %\dblog{==================== Begin firstN ====================}%
  \declarelist{#3}{\getsep{#1}}%
  \setcounter{lists@count@misc}{1}
  
  \def\lists@take##1{%
    \ifnum#2<\value{lists@count@misc}%
      %\dblog{Taken}%
      \appendtolist{#3}{##1}%
    \fi%
    \stepcounter{lists@count@misc}%
  }
  
  \iterate{#1}{\lists@take}
}

\newcommand{\splitAt}[2]{
  \declarelist{#1@front}{\getsep{#1}}
  \declarelist{#1@back}{\getsep{#1}}
  \setcounter{lists@count@misc}{0}
  
  \def\lists@take##1{
    \ifnum#2<\value{lists@count@misc}
      \appendtolist{#1@back}{##1}
    \else
      \appendtolist{#1@front}{##1}
    \fi
    \stepcounter{lists@count@misc}
  }
  
  \iterate{#1}{\lists@take}
}

\newcommand{\declarelist}[2]
{
    \expandafter\edef\csname list@#1@cons@item0\endcsname{\emptylist}
    \expandafter\edef\csname list@#1@sep\endcsname{#2}
    \ifcounter{list@#1@count}{\setcounter{list@#1@count}{0}}{\newcounter{list@#1@count}}
}

\newcommand{\listfromcsv}[3][\csvsep]
{
  \declarelist{#2}{#1}
  \def\lists@app##1{\appendtolist{#2}{##1}}
  \edef\tmp{#3}
  %\dblog{Entering foreach}
  \expandafter\forcsvlist\expandafter\lists@app\expandafter{\tmp}
}

\def\list@cons#1#2#3{%
  (#2 [CONS] \csname #1\endcsname)%
}

\def\getconsstructure#1{%
%%\dblog{List head: \expandafter\noexpand\csname list@#1@cons@item\arabic{list@#1@count}\endcsname}%
\csname list@#1@cons@item\arabic{list@#1@count}\endcsname}

\def\getsep#1{\csname list@#1@sep\endcsname}

\def\unused#1#2{% REMOVE EVENTUALLY PROBABLY
  \ifx\emptylist#1%
    \expandafter\def\csname list@#1\endcsname{\emptystring}%
    \expandafter\def\csname list@#1@csv\endcsname{\emptystring}%
  \fi%
  \edef\temp{\csname list@#1\endcsname}%
  \ifx\emptystring\temp%
    \expandafter\edef\csname list@#1\endcsname{#2}%
  \else%
    \expandafter\edef\csname list@#1\endcsname{%
      \temp\csname list@#1@sep\endcsname#2}%
  \fi%
  %
  \edef\temp{\csname list@#1@csv\endcsname}%
  \ifx\emptystring\temp%
    \expandafter\edef\csname list@#1@csv\endcsname{#2}%
  \else%
    \expandafter\edef\csname list@#1@csv\endcsname{%
      \temp\csvsep#2}%
  \fi%
}

\newcommand{\declarecsvlist}[1]{\declarelist{#1}{, }}

\def\lists@concat#1#2#3{%
  \ifstrequal{#2}{\emptystring}{#1}{#1#3#2}
}

\newcommand{\getlist}[1]{
  \def\setsepconcat##1##2{\lists@concat{##1}{##2}{\getsep{#1}}}
  \foldl{#1}{\setsepconcat}{\emptystring}
}

% Appends a new item to the list specified by #1
\def\appendtolist#1#2{%
  %\dblog{================ Begin append ===============}%
  %
  \edef\lists@oldHead{list@#1@cons@item\arabic{list@#1@count}}%
  %\dblog{Appending #2 to #1 -> \tempA \space CONS #2}
  %
  \stepcounter{list@#1@count}%
  \edef\lists@newHead{list@#1@cons@item\arabic{list@#1@count}}%
  %
  \edef\lists@item@value{#2}%
  \edef\lists@sep{\getsep{#1}}
  %
  \expandafter\expandafter\expandafter\def\expandafter\expandafter\expandafter\lists@app@tmp\expandafter\expandafter\expandafter{%
    \expandafter\expandafter\expandafter%
    \list@cons\expandafter\expandafter\expandafter{%
      \expandafter\lists@oldHead\expandafter}%
      \expandafter{\lists@item@value}{\lists@sep}%
  }%
  %
  %\dblog{\expandafter\noexpand\lists@app@tmp}%
  %
  \expandafter\expandafter\expandafter\def%
    \expandafter\csname\expandafter\lists@newHead\expandafter\endcsname\expandafter%
    {\lists@app@tmp}%
  %
  %\dblog{}%
}

\newcommand{\doforall}[2]
{
  \iterate{#1}{#2}
  \PackageWarning{lists}{\noexpand\doforall is deprecated, use \noexpand\iterate instead.}
}

\newcommand{\IfElseEmpty}[3]
{
  \ifnum\value{list@#1@count} = 0%
    #2
  \else%
    #3
  \fi%
}

\newcommand{\IfEmpty}[2]{\IfElseEmpty{#1}{#2}{}}

\newcommand{\IfNotEmpty}[2]{\IfElseEmpty{#1}{}{#2}}

\newcommand{\getcount}[1]{\value{list@#1@count}}

\newcommand{\getcountdb}[1]{\arabic{list@#1@count}}